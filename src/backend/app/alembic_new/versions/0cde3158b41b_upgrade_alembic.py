"""Upgrade Alembic

Revision ID: 0cde3158b41b
Revises: c4b798925338
Create Date: 2023-05-04 15:56:50.625858

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0cde3158b41b'
down_revision = 'c4b798925338'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('annotationclass')
    op.drop_table('domain')
    op.drop_index('ix_statistics_id', table_name='statistics')
    op.drop_table('statistics')
    op.drop_table('fileformat')
    op.drop_table('projectannotationclass')
    op.drop_table('group')
    op.drop_table('annotationtype')
    op.drop_index('ix_task_id', table_name='task')
    op.drop_index('ix_task_name', table_name='task')
    op.drop_table('task')
    op.drop_table('annotationerror')
    op.drop_table('state')
    op.drop_index('ix_item_description', table_name='item')
    op.drop_index('ix_item_id', table_name='item')
    op.drop_index('ix_item_title', table_name='item')
    op.drop_table('item')
    op.drop_table('projectannotationerror')
    op.drop_index('ix_project_id', table_name='project')
    op.drop_index('ix_project_name', table_name='project')
    op.drop_table('project')
    op.add_column('user', sa.Column('first_name', sa.String(), nullable=False))
    op.add_column('user', sa.Column('last_name', sa.String(), nullable=False))
    op.add_column('user', sa.Column('birth', sa.DateTime(), nullable=True))
    op.add_column('user', sa.Column('created', sa.DateTime(), nullable=True))
    op.drop_index('ix_user_email', table_name='user')
    op.drop_index('ix_user_full_name', table_name='user')
    op.drop_index('ix_user_id', table_name='user')
    op.drop_constraint('user_group_id_fkey', 'user', type_='foreignkey')
    op.drop_column('user', 'description')
    op.drop_column('user', 'group_id')
    op.drop_column('user', 'hashed_password')
    op.drop_column('user', 'is_active')
    op.drop_column('user', 'is_superuser')
    op.drop_column('user', 'full_name')
    op.drop_column('user', 'email')
    op.drop_column('user', 'phone')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_foreign_key('user_group_id_fkey', 'user', 'group', ['group_id'], ['id'])
    op.create_index('ix_user_id', 'user', ['id'], unique=False)
    op.create_index('ix_user_full_name', 'user', ['full_name'], unique=False)
    op.create_index('ix_user_email', 'user', ['email'], unique=False)
    op.drop_column('user', 'created')
    op.drop_column('user', 'birth')
    op.drop_column('user', 'last_name')
    op.drop_column('user', 'first_name')
    op.create_table('project',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('project_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sample_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('per_task_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dir_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_format_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('annotation_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('customer_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_company', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('customer_phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dataset_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('domain_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['annotation_type_id'], ['annotationtype.id'], name='project_annotation_type_id_fkey'),
    sa.ForeignKeyConstraint(['domain_id'], ['domain.id'], name='project_domain_id_fkey'),
    sa.ForeignKeyConstraint(['file_format_id'], ['fileformat.id'], name='project_file_format_id_fkey'),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='project_owner_id_fkey'),
    sa.ForeignKeyConstraint(['state_id'], ['state.id'], name='project_state_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='project_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_project_name', 'project', ['name'], unique=False)
    op.create_index('ix_project_id', 'project', ['id'], unique=False)
    op.create_table('projectannotationerror',
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('annotationerror_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['annotationerror_id'], ['annotationerror.id'], name='projectannotationerror_annotationerror_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='projectannotationerror_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', 'annotationerror_id', name='projectannotationerror_pkey')
    )
    op.create_table('item',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='item_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='item_pkey')
    )
    op.create_index('ix_item_title', 'item', ['title'], unique=False)
    op.create_index('ix_item_id', 'item', ['id'], unique=False)
    op.create_index('ix_item_description', 'item', ['description'], unique=False)
    op.create_table('state',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('state_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='state_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('annotationerror',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='annotationerror_pkey')
    )
    op.create_table('task',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('annotator_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('anno_file_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('reviewer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['annotator_id'], ['user.id'], name='task_annotator_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='task_project_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['user.id'], name='task_reviewer_id_fkey'),
    sa.ForeignKeyConstraint(['state_id'], ['state.id'], name='task_state_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_pkey')
    )
    op.create_index('ix_task_name', 'task', ['name'], unique=False)
    op.create_index('ix_task_id', 'task', ['id'], unique=False)
    op.create_table('annotationtype',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('annotationtype_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='annotationtype_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('group',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('group_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('read_only', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_user', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_reviewer', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='group_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('projectannotationclass',
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('annotationclass_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['annotationclass_id'], ['annotationclass.id'], name='projectannotationclass_annotationclass_id_fkey'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='projectannotationclass_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', 'annotationclass_id', name='projectannotationclass_pkey')
    )
    op.create_table('fileformat',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('fileformat_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='fileformat_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('statistics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('verbose', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='statistics_project_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='statistics_pkey')
    )
    op.create_index('ix_statistics_id', 'statistics', ['id'], unique=False)
    op.create_table('domain',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='domain_pkey')
    )
    op.create_table('annotationclass',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='annotationclass_pkey')
    )
    # ### end Alembic commands ###
