version: "3.3"
services:

  proxy:
    ports:
      - "80:80"
      #- "443:443"
      - "8090:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      #- ./acme.json:/acme.json
      - "./certs:/certs"

    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true

      # # Enalbling ACME
      - --entrypoints.web.address=:80
      #- --entrypoints.websecure.address=:443
      #- --entrypoints.web.http.redirections.entryPoint.to=websecure
      #- --entrypoints.web.http.redirections.entryPoint.scheme=https
      #- --entrypoints.web.http.redirections.entrypoint.permanent=true

      # - --certificatesresolvers.myresolver.acme.email=R_D@testworks.co.kr
      # - --certificatesresolvers.myresolver.acme.storage=acme.json
      # - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      
      #- --certificatesresolvers.le.acme.email=R_D@testworks.co.kr      
      ##- --certificatesResolvers.le.acme.storage=acme.json
      #- --certificatesResolvers.le.acme.storage=/certs/acme.json
      #- --certificatesresolvers.le.acme.tlschallenge=true

      
      
    labels:
    #   # - traefik.enable=true
    #   # - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
    #   # - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80
    #   # - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public.tls=true
    #   # - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public.tls.certresolver=myresolver
      
    #   # global redirect to https
    #   - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
    #   - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
    #   # middleware redirect
    #   - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  pgadmin:
    ports:
      - "5050:5050"

  flower:
    ports:
      - "5555:5555"

  backend:
    #ports:
    #  - "8888:8888"
    volumes:
      - ./backend/app:/app
    environment:
      #- JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      - FILE_SERVER_HOST=http://${DOMAIN?Variable not set}/static
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    #command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      # Expose container through Traefik
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      # To update the configuration of the Router automatically attached to the container
      #- traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)      
      # If a container exposes multiple ports, you should manually specify which port Traefik should use for communication
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.tls=true
      # - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.tls.certresolver=myresolver

      - traefik.http.routers.${STACK_NAME?Variable not set}-backend.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - "traefik.http.routers.${STACK_NAME?Variable not set}-backend.entrypoints=web"
      #- "traefik.http.routers.${STACK_NAME?Variable not set}-backend.tls=true"
      #- "traefik.http.routers.${STACK_NAME?Variable not set}-backend.tls.certresolver=le"

  celeryworker:
    volumes:
      - ./backend/app:/app
    environment:
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
